{"version":3,"sources":["ColorAssigner.js"],"names":["ColorAssigner","palette","undefined","_palette","Palettes","DEFAULT","slice","Object","freeze","_preferredColors","map","color","parseCSSColor","_availableColors","_assignedColorsById","_assignedColors","id","Error","_acquireColor","push","r","g","b","a","getColor","pad","str","length","toString","index","indexOf","splice","generateRandomColor"],"mappings":"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","file":"ColorAssigner.js","sourcesContent":["import ColorGenerator from './ColorGenerator';\nimport {default as palettes} from './Palettes';\nimport {default as parser} from 'csscolorparser';\n\n/**\n * The ColorAssigner manages the assignment of colors to unique resources.  A\n * color will uniquely mapped to each resource.  Resources are identified by\n * a unique string id.  The consumer can provide an array of preferred colors\n * that will be used, if they are available. After all preferred colors are\n * assigned, random colors will be assigned.\n */\nexport default class ColorAssigner {\n\n  static get Palettes() {\n    return palettes;\n  }\n\n  /**\n   * Creates a new ColorAssigner using the supplied preferred colors.\n   *\n   * @param palette {Array} An array of preferred colors to use.  These colors\n   * will be used as long as they are available.\n   *\n   * @constructor\n   */\n  constructor(palette) {\n    if (palette === undefined) {\n      this._palette = ColorAssigner.Palettes.DEFAULT.slice(0);\n    } else {\n      this._palette = palette.slice(0);\n    }\n    Object.freeze(this._palette);\n\n    this._preferredColors = this._palette.map((color) => {\n      return parser.parseCSSColor(color);\n    });\n    Object.freeze(this._preferredColors);\n\n    this._availableColors = this._preferredColors.slice(0);\n    this._assignedColorsById = {};\n    this._assignedColors = [];\n  }\n\n  /**\n   * Gets the current palette in use.\n   *\n   * @returns {Array} The palette of preferred colors.\n   */\n  palette() {\n    return this._palette;\n  }\n\n  /**\n   * Gets a color for a specified unique id.  If a color has previously been\n   * assigned to this id, it will be returned.  Otherwise a new color will\n   * be assigned.  A preferred color will be assigned if one is available,\n   * otherwise a random color will be assigned and returned.\n   *\n   * Colors take the form of:\n   *\n   * {\n   *   r: [0-255],\n   *   g: [0-255],\n   *   b: [0-255],\n   *   a: [0-255]\n   * }\n   *\n   * @param {string} id The unique id to get a color for.\n   * @returns {Object} A hex representation of the color.\n   */\n  getColor(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n      throw new Error(`id must be a string or a number: ${id}`);\n    }\n\n    let color = this._assignedColorsById[id];\n\n    if (color === undefined) {\n      color = this._acquireColor();\n      this._assignedColorsById[id] = color;\n      this._assignedColors.push(color);\n    }\n\n    return {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: color[3]\n    };\n  }\n\n  /**\n   * Gets a color for the specified resource as an rgba string.\n   * 'rgba(200, 120, 56, 255)'\n   *\n   * @param id The id of the resource to get the color for.\n   * @returns {string} The color as an rgba string.\n   */\n  getColorAsRgba(id) {\n    const color = this.getColor(id);\n\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n  }\n\n  /**\n   * Gets a color for the specified resource as a hex string.\n   * '#ff23b5'\n   *\n   * @param id The id of the resource to get the color for.\n   * @returns {string} The color as a hex string.\n   */\n  getColorAsHex(id) {\n    const color = this.getColor(id);\n\n    function pad(str) {\n      while (str.length < 2) {\n        str = '0' + str;\n      }\n      return str;\n    }\n\n    return '#' + pad(color.r.toString(16)) + pad(color.g.toString(16)) + pad(color.b.toString(16));\n  }\n\n  /**\n   * Releases a color currently assigned to the unique id.  If the color being\n   * released is a preferred color, it will be returned to the set of available\n   * colors.\n   *\n   * @param {string} id The id of the color to release.\n   */\n  releaseColor(id) {\n    if (typeof id !== 'string' && typeof id !== 'number') {\n      throw new Error(`id must be a string or a number: ${id}`);\n    }\n\n    const color = this._assignedColorsById[id];\n\n    if (color === undefined) {\n      throw new Error(`No color assigned for id: ${id}`);\n    }\n\n    const index = this._assignedColors.indexOf(color);\n\n    this._assignedColors.splice(index, 1);\n    delete this._assignedColorsById[id];\n\n    // If this was a preferred color put it back on the list.\n    if (this._preferredColors.indexOf(color) >= 0) {\n      this._availableColors.push(color);\n    }\n  }\n\n  /**\n   * Acquires an unused color. This method will attempt to return a preferred\n   * color first, and then generate a random color if a preferred color is not\n   * available.\n   *\n   * @returns {string} A hex representation of the color.\n   * @private\n   */\n  _acquireColor() {\n    let color = null;\n\n    if (this._availableColors.length > 0) {\n      color = this._availableColors[0];\n      this._availableColors.splice(0, 1);\n    } else {\n      color = ColorGenerator.generateRandomColor(this._assignedColors);\n    }\n\n    return color;\n  }\n}\n"],"sourceRoot":"/source/"}